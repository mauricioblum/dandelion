{"version":3,"sources":["src/contexts/appContext.tsx","src/theme/index.ts","src/components/Button/styles.ts","src/components/Button/index.tsx","src/screens/Home/styles.ts","src/screens/Home/index.tsx","src/theme/components.ts","src/screens/SongRequest/styles.ts","src/screens/SongRequest/index.tsx","src/screens/Settings/index.tsx","src/screens/MySongs/styles.ts","src/screens/MySongs/index.tsx","src/routes.tsx","src/services/firebase.ts","App.tsx"],"names":["AppContext","React","useAppContext","AppProvider","children","rest","colorScheme","useColorScheme","mode","setMode","Provider","value","theme","setTheme","lightTheme","colors","main","secondary","background","text","textInverted","darkTheme","StyledButton","styled","Pressable","attrs","elevation","props","ButtonText","Text","Button","onPress","title","marginVertical","style","Container","View","Title","SongLabel","SongCopy","SettingsView","Home","navigation","useAuthState","firebase","auth","user","useObjectVal","database","ref","loading","login","a","async","signInAnonymously","console","log","useEffect","StatusBar","navigate","Feather","name","size","marginBottom","ActivityIndicator","color","Form","Label","Input","TextInput","SongRequest","useState","setName","artist","setArtist","artistInputRef","useRef","handleRequestSong","song","isPlaying","userId","uid","push","error","Alert","alert","cancelable","onChangeText","autoCapitalize","autoCorrect","returnKeyType","onEndEditing","current","focus","Settings","SongWrapper","SongTitle","MySongs","useListVals","keyField","songs","userSongs","filter","map","key","songId","remove","err","handleDeleteSong","length","Stack","createStackNavigator","Routes","getHeaderColors","NavigationContainer","Navigator","screenOptions","headerStyle","backgroundColor","headerTintColor","headerTitleStyle","headerBackTitleStyle","Screen","component","options","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","App","apps","app","initializeApp"],"mappings":"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","file":"static/js/app.9a31ff9e.chunk.js","sourcesContent":["/* eslint-disable no-unused-vars */\nimport * as React from 'react';\nimport { useColorScheme } from 'react-native';\n\nexport type Theme = 'light' | 'dark';\nexport interface AppContextProps {\n  setTheme: (theme: Theme) => void;\n  theme: Theme;\n}\n\nexport const AppContext = React.createContext<AppContextProps>(\n  {} as AppContextProps,\n);\nexport const useAppContext = () => {\n  return React.useContext(AppContext);\n};\n\nconst AppProvider: React.FC = ({ children, ...rest }) => {\n  const colorScheme = useColorScheme();\n\n  const [mode, setMode] = React.useState<Theme>(colorScheme as Theme);\n\n  const setTheme = (theme: Theme) => {\n    setMode(theme);\n  };\n\n  return (\n    <AppContext.Provider value={{ ...rest, theme: mode, setTheme }}>\n      {children}\n    </AppContext.Provider>\n  );\n};\n\nexport default AppProvider;\n","import { DefaultTheme } from 'styled-components/native';\n\nconst lightTheme: DefaultTheme = {\n  colors: {\n    main: '#9F4D5D',\n    secondary: '#4F6758',\n    background: '#FFF4F0',\n    text: '#3f3f3f',\n    textInverted: '#fff',\n  },\n};\n\nconst darkTheme: DefaultTheme = {\n  colors: {\n    main: '#9F4D5D',\n    secondary: '#4F6758',\n    background: '#282A36',\n    text: '#fff',\n    textInverted: '#FFF4F0',\n  },\n};\n\nexport { lightTheme, darkTheme };\n","import styled from 'styled-components/native';\n\nexport const StyledButton = styled.Pressable.attrs({\n  elevation: 3,\n})`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 12px 24px;\n  border-radius: 6px;\n  min-width: 180px;\n  background-color: ${(props) => props.theme.colors.main};\n`;\n\nexport const ButtonText = styled.Text`\n  font-size: 16px;\n  text-align: center;\n  font-weight: bold;\n  color: ${(props) => props.theme.colors.textInverted};\n`;\n","import React from 'react';\nimport { StyledButton, ButtonText } from './styles';\n\ninterface ButtonProps {\n  onPress: () => void;\n  title?: string;\n  marginVertical?: number;\n}\n\nexport const Button: React.FC<ButtonProps> = (props) => {\n  const { onPress, title = 'Save', marginVertical } = props;\n  return (\n    <StyledButton\n      onPress={onPress}\n      style={{\n        marginVertical,\n      }}\n    >\n      <ButtonText>{title}</ButtonText>\n    </StyledButton>\n  );\n};\n","import styled from 'styled-components/native';\n\nexport const Container = styled.View`\n  flex: 1;\n  background: ${(props) => props.theme.colors.background};\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const Title = styled.Text`\n  font-size: 24px;\n  color: ${(props) => props.theme.colors.text};\n`;\n\nexport const SongLabel = styled.Text`\n  font-size: 18px;\n  color: ${(props) => props.theme.colors.text};\n`;\n\nexport const SongCopy = styled.Text`\n  font-size: 18px;\n  font-weight: bold;\n  color: ${(props) => props.theme.colors.main};\n`;\n\nexport const SettingsView = styled.View`\n  position: absolute;\n  top: 20px;\n  left: 20px;\n`;\n","import { StatusBar } from 'expo-status-bar';\nimport React, { useEffect } from 'react';\nimport { ActivityIndicator, Pressable } from 'react-native';\nimport firebase from 'firebase/app';\nimport { useObjectVal } from 'react-firebase-hooks/database';\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { Feather } from '@expo/vector-icons';\nimport { Button } from '../../components/Button';\nimport { useAppContext } from '../../contexts/appContext';\nimport { NavigationProps } from '../../types';\nimport { Container, Title, SettingsView, SongLabel, SongCopy } from './styles';\n\ninterface HomeProps extends NavigationProps {}\n\nexport const Home: React.FC<HomeProps> = ({ navigation }) => {\n  const { theme } = useAppContext();\n\n  const [user, loadingAuth] = useAuthState(firebase.auth());\n\n  const [value, loading] = useObjectVal(firebase.database().ref('currentSong'));\n\n  const login = async () => {\n    try {\n      await firebase.auth().signInAnonymously();\n    } catch (err) {\n      console.log('err');\n    }\n  };\n\n  const logout = () => {\n    firebase.auth().signOut();\n  };\n\n  useEffect(() => {\n    if (!user) {\n      login();\n    } else {\n      console.log('User is authenticated', user);\n    }\n  }, [user, login]);\n\n  return (\n    <Container>\n      <StatusBar style={theme === 'dark' ? 'light' : 'dark'} />\n      <SettingsView>\n        <Pressable onPress={() => navigation.navigate('Settings')}>\n          <Feather name=\"settings\" size={28} />\n        </Pressable>\n      </SettingsView>\n      <Title\n        style={{\n          marginBottom: 48,\n        }}\n      >\n        Dandelion\n      </Title>\n      <SongLabel>Tocando agora:</SongLabel>\n      {loading ? (\n        <ActivityIndicator\n          style={{\n            marginBottom: 48,\n          }}\n          size=\"small\"\n          color=\"#9F4D5D\"\n        />\n      ) : (\n        <SongCopy\n          style={{\n            marginBottom: 48,\n          }}\n        >\n          {value}\n        </SongCopy>\n      )}\n\n      <Button\n        title=\"Pedir música\"\n        marginVertical={10}\n        onPress={() => navigation.navigate('SongRequest')}\n      />\n\n      <Button\n        title=\"Meus pedidos\"\n        marginVertical={10}\n        onPress={() => navigation.navigate('MySongs')}\n      />\n    </Container>\n  );\n};\n","import styled from 'styled-components/native';\n\nexport const Container = styled.View`\n  flex: 1;\n  background: ${(props) => props.theme.colors.background};\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const Title = styled.Text`\n  font-size: 24px;\n  color: ${(props) => props.theme.colors.text};\n`;\n","import styled from 'styled-components/native';\n\nexport const Form = styled.View`\n  display: flex;\n  justify-content: center;\n`;\n\nexport const Label = styled.Text`\n  font-size: 22px;\n  font-weight: bold;\n  color: ${(props) => props.theme.colors.text};\n  margin-bottom: 4px;\n`;\n\nexport const Input = styled.TextInput`\n  border-width: 1px;\n  border-color: ${(props) => props.theme.colors.main};\n  padding: 5px 10px;\n  height: 40px;\n  width: 220px;\n  color: ${(props) => props.theme.colors.text};\n  font-size: 18px;\n  border-radius: 6px;\n  margin-bottom: 20px;\n`;\n","import React, { useState, useRef } from 'react';\nimport { Alert } from 'react-native';\nimport firebase from 'firebase/app';\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { Container } from '../../theme/components';\nimport { Button } from '../../components/Button';\nimport { Form, Label, Input } from './styles';\n\nexport const SongRequest: React.FC = () => {\n  const [name, setName] = useState('');\n  const [artist, setArtist] = useState('');\n  const artistInputRef = useRef<any>(null);\n  const [user] = useAuthState(firebase.auth());\n\n  const handleRequestSong = () => {\n    if (name === '') {\n      Alert.alert('Escreva pelo menos o nome da música!!!');\n      return;\n    }\n\n    if (!user) {\n      Alert.alert('Usuário não autenticado!');\n      return;\n    }\n\n    const song = {\n      name,\n      artist,\n      isPlaying: false,\n      userId: user.uid,\n    };\n\n    const requestsRef = firebase.database().ref(`requests`);\n\n    requestsRef.push(song, (error) => {\n      if (error) {\n        Alert.alert('Erro ao salvar seu pedido, tente novamente');\n      } else {\n        setName('');\n        setArtist('');\n        Alert.alert(\n          'Pedido efetuado com sucesso',\n          'O DJ já recebeu o seu pedido',\n          [\n            {\n              text: 'OK',\n              onPress: () => {},\n            },\n          ],\n          { cancelable: false },\n        );\n      }\n    });\n  };\n\n  return (\n    <Container>\n      <Form>\n        <Label>Nome da música</Label>\n        <Input\n          onChangeText={(text) => setName(text)}\n          autoCapitalize=\"words\"\n          autoCorrect={false}\n          value={name}\n          returnKeyType=\"next\"\n          onEndEditing={() => {\n            if (artistInputRef.current) {\n              artistInputRef.current.focus();\n            }\n          }}\n        />\n        <Label>Artista / Banda</Label>\n        <Input\n          ref={artistInputRef}\n          onChangeText={(text) => setArtist(text)}\n          autoCapitalize=\"words\"\n          autoCorrect={false}\n          value={artist}\n          returnKeyType=\"send\"\n          onEndEditing={handleRequestSong}\n        />\n        <Button title=\"Pedir\" marginVertical={10} onPress={handleRequestSong} />\n      </Form>\n    </Container>\n  );\n};\n","import React from 'react';\nimport { Button } from '../../components/Button';\nimport { useAppContext } from '../../contexts/appContext';\nimport { Container } from '../../theme/components';\n\nexport const Settings: React.FC = () => {\n  const { theme, setTheme } = useAppContext();\n\n  return (\n    <Container>\n      <Button\n        title=\"Mudar Tema\"\n        onPress={() => {\n          setTheme(theme === 'dark' ? 'light' : 'dark');\n        }}\n      />\n    </Container>\n  );\n};\n","import styled from 'styled-components/native';\n\nexport const SongWrapper = styled.View`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  min-width: 250px;\n`;\n\nexport const SongTitle = styled.Text`\n  font-size: 18px;\n  font-weight: bold;\n  color: ${(props) => props.theme.colors.main};\n  margin-right: 16px;\n`;\n","import React from 'react';\nimport { Pressable } from 'react-native';\nimport firebase from 'firebase/app';\nimport { useListVals } from 'react-firebase-hooks/database';\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { Feather } from '@expo/vector-icons';\nimport { Container } from '../../theme/components';\nimport { SongTitle, SongWrapper } from './styles';\nimport { Song } from '../../types';\n\nexport const MySongs: React.FC = () => {\n  const [songs] = useListVals<Song>(firebase.database().ref('requests'), {\n    keyField: 'songId',\n  });\n\n  const [user] = useAuthState(firebase.auth());\n\n  const handleDeleteSong = (songId: string) => {\n    try {\n      firebase.database().ref(`requests/${songId}`).remove();\n    } catch (err) {\n      console.log('error removing song', err);\n    }\n  };\n\n  if (!user || !songs) {\n    return null;\n  }\n\n  const userSongs = songs.filter((song) => song.userId === user.uid);\n\n  return (\n    <Container>\n      {userSongs?.map((song) => (\n        <SongWrapper key={song.songId}>\n          <SongTitle>\n            {song.name} - {song.artist}\n          </SongTitle>\n          <Pressable onPress={() => handleDeleteSong(song.songId)}>\n            <Feather name=\"trash-2\" size={20} />\n          </Pressable>\n        </SongWrapper>\n      ))}\n      {userSongs.length === 0 && (\n        <SongTitle>Você ainda não fez nenhum pedido.</SongTitle>\n      )}\n    </Container>\n  );\n};\n","import React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { ThemeProvider } from 'styled-components/native';\n\nimport { lightTheme, darkTheme } from './theme';\n\nimport { Home } from './screens/Home';\nimport { SongRequest } from './screens/SongRequest';\nimport { Settings } from './screens/Settings';\nimport { MySongs } from './screens/MySongs';\nimport { useAppContext } from './contexts/appContext';\nimport { RootStackParamList } from './types';\n\nconst Stack = createStackNavigator<RootStackParamList>();\n\nconst Routes: React.FC = () => {\n  const { theme } = useAppContext();\n\n  const getHeaderColors = () => {\n    if (theme === 'dark') {\n      return {\n        background: '#282A36',\n        text: '#fff',\n      };\n    }\n    return {\n      background: '#FFF4F0',\n      text: '#333',\n    };\n  };\n\n  return (\n    <ThemeProvider theme={theme === 'dark' ? darkTheme : lightTheme}>\n      <NavigationContainer>\n        <Stack.Navigator\n          screenOptions={{\n            headerStyle: {\n              backgroundColor: getHeaderColors().background,\n            },\n            headerTintColor: getHeaderColors().text,\n            headerTitleStyle: {\n              color: getHeaderColors().text,\n            },\n            headerBackTitleStyle: {\n              backgroundColor: getHeaderColors().background,\n            },\n          }}\n        >\n          <Stack.Screen\n            name=\"Home\"\n            component={Home}\n            options={{\n              title: 'Dandelion',\n            }}\n          />\n          <Stack.Screen\n            name=\"SongRequest\"\n            component={SongRequest}\n            options={{\n              title: 'SongRequest',\n            }}\n          />\n          <Stack.Screen\n            name=\"MySongs\"\n            component={MySongs}\n            options={{\n              title: 'Meus pedidos',\n            }}\n          />\n          <Stack.Screen\n            name=\"Settings\"\n            component={Settings}\n            options={{\n              title: 'Settings',\n            }}\n          />\n        </Stack.Navigator>\n      </NavigationContainer>\n    </ThemeProvider>\n  );\n};\n\nexport default Routes;\n","import firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\n\nconst firebaseConfig = {\n  apiKey: 'AIzaSyAQ_cMkysBqb6AvTRkE6HQt1OGwiN8WITI',\n  authDomain: 'dandelion-fm2226.firebaseapp.com',\n  databaseURL: 'https://dandelion-fm2226-default-rtdb.firebaseio.com',\n  projectId: 'dandelion-fm2226',\n  storageBucket: 'dandelion-fm2226.appspot.com',\n  messagingSenderId: '426822046150',\n  appId: '1:426822046150:web:53e3c6f74a60dafaf3e2c7',\n  measurementId: 'G-TN20P7GL0L',\n};\n\nexport function initFirebase() {\n  if (!firebase.apps.length) {\n    firebase.initializeApp(firebaseConfig);\n  } else {\n    firebase.app();\n  }\n}\n","import React from 'react';\nimport AppProvider from './src/contexts/appContext';\nimport Routes from './src/routes';\nimport { initFirebase } from './src/services/firebase';\n\ninitFirebase();\n\nexport default function App() {\n  return (\n    <AppProvider>\n      <Routes />\n    </AppProvider>\n  );\n}\n"],"sourceRoot":""}